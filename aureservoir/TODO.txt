
vor Release auf reservoir computing liste:
- bsp vom d+s paper dazutun zu examples
- beschreibung wie man die library kompiliert bzw flens halt
- auch wo die examples, tests usw. sind gscheit beschreiben
  (dass man halt die python sachen anschauen sollte)



Gaussian-IP:
- weitere Versuche machen, dann Bsp dazutun

versuchen SIM_BP umzurechnen
-> brauch nurmehr SIM_FILTER verwenden !
-> SIM_LI auch mit SIM_FILTER rechnen !
-> viel weniger klassen und code !

check:
- wenn SIM_SQUARE und TRAIN_* dann gibts keinen Fehler aber es geht gar nix
-> in init prüfen, wenn SIM_SQUARE gesetzt, dass auch TRAIN_*_SQUARE gesetzt sein muss !

probiern ob andere typemaps von numpy.i jetzt nicht manchmal besser wären
(z.B. input statt immer inplace ...)

bessere code organisation (???):
- Activation Function: auch als function objects ?
  -> zumindest ist im moment die globale variable ein hack ...
  -> schauen wie man das sonst besser lösen kann
- eigene Interface-Klasse für reservoir adaptation algorithms machen

Problem bei esn_predict lösen -> siehe protokoll dort

Online Training:
- target und output bei train() übergeben
  -> braucht default parameterübergabe:
     inline void simulate(const DEMatrix &in, DEMatrix &out,
                          const DEMatrix &target=DEMatrix())
- in swig braucht man typecheck
  -> mit numpy.i probiern ob das funktioniert !!

Tests:
- TrainLS und TrainLSSquare haben manchmal Fehler bei float32
  -> wahrscheinlich Problem von Präzesion on gels(s) bei floats
  -> schauen obs das überhaupt noch gibt !?
- gscheite automatische Auswahl von float32,64 noch machen !
  (vielleicht kann man das irgendwie der testklassen übergeben)
- noise vector funktion
- init_test.cpp in python machen
- für sigmoid activation functions

DOCSTRING:
 - docstring der einzelnen train/test sachen noch dazutun rausparsen und
   in python dazutun

SWIG:
- noch (python?) code dazu, dass er den shape automatisch ändert, wenns
  nur eindimensional ist (data.shape = 1,-1)
  -> könnte bei float version auch gleich automatisch daten von double umwandeln
     wenn nötig
  -> siehe tests in numpy.i, der steht wie man python code hinzufügen kann
- wenn man bei train z.B. in integer array reinschickt geht es nicht
  (dann is erstes array alles 0)
  -> schaun ob er das mit numpy.i jetzt alles automatisch macht

NUMPY STYLE GUID (tests und etc.):
- http://projects.scipy.org/scipy/numpy/wiki/DistutilsDoc#the-tests-directory

---------------------

- Algorithmen/Activation Namen besser abspeichern, am besten in einer map
  oder string konstante, wo die fix zugeordnet sind

- DENORMALS:
  -> set_denormal_flags(): irgendwie anders setzen, nicht direkt in der Klasse !

- schauen ob man in doxygen richtige Referenzen machen kann, weil ich doch
  auf einige papers verweise
  -> zumindest nicht nur die links zu papers angeben, sondern eher Titel+Autor
     (sonst wenn link sich mal änder -> alles sinnlos)

-----------------------

Doxygen Regionen:
        //! @name Beschreibung der Region
        //@{
              ...
        //@}
weitere Doxygen tags:
\warning
\attention
\note
\sa url : Referenz zu Klassen, Methoden, ... URLs
\example example_test.cpp -> filename wird als example in doxygen doku dazugetan
(muss EXAMPLE_PATH im doxyfile richtig setzen !)

-----------------------

see "\todo" tags in the doxygen documentation
